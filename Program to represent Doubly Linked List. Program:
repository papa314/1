#include <stdio.h> 
#include <stdlib.h> 
// defining a node 
typedef struct Node { 
    int data; 
    struct Node* next; 
    struct Node* prev; 
} Node; 
  
Node* createNode(int data) 
{ 
    Node* newNode = (Node*)malloc(sizeof(Node)); 
    newNode->data = data; 
    newNode->next = NULL; 
    newNode->prev = NULL; 
    return newNode; 
}  
void insertAtBeginning(Node** head, int data) 
{ 
    // creating new node 
    Node* newNode = createNode(data); 
  
    // check if DLL is empty 
    if (*head == NULL) { 
        *head = newNode; 
        return; 
    } 
    newNode->next = *head; 
    (*head)->prev = newNode; 
    *head = newNode; 
} 
void insertAtEnd(Node** head, int data) 
{ 
    // creating new node 
    Node* newNode = createNode(data); 
    // check if DLL is empty 
    if (*head == NULL) { 
        *head = newNode; 
        return; 
    } 
    Node* temp = *head; 
    while (temp->next != NULL) { 
        temp = temp->next; 
    } 
    temp->next = newNode; 
    newNode->prev = temp; 
}
void insertAtPosition(Node** head, int data, int position) 
{ 
    if (position < 1) { 
        printf("Position should be >= 1.\n"); 
        return; 
    } 
  
    if (position == 1) { 
        insertAtBeginning(head, data); 
        return; 
    } 
    Node* newNode = createNode(data); 
    Node* temp = *head; 
    for (int i = 1; temp != NULL && i < position - 1; i++) { 
        temp = temp->next; 
    } 
    if (temp == NULL) { 
        printf( 
            "Position greater than the number of nodes.\n"); 
        return; 
    } 
    newNode->next = temp->next; 
    newNode->prev = temp; 
    if (temp->next != NULL) { 
        temp->next->prev = newNode; 
    } 
    temp->next = newNode; 
}
void deleteAtBeginning(Node** head) 
{ 
    // checking if the DLL is empty 
    if (*head == NULL) { 
        printf("The list is already empty.\n"); 
        return; 
    } 
    Node* temp = *head; 
    *head = (*head)->next; 
    if (*head != NULL) { 
        (*head)->prev = NULL; 
    } 
    free(temp); 
} 
void deleteAtEnd(Node** head) 
{ 
    // checking if DLL is empty 
    if (*head == NULL) { 
        printf("The list is already empty.\n"); 
        return; 
    } 
    Node* temp = *head; 
    if (temp->next == NULL) { 
        *head = NULL; 
        free(temp); 
        return; 
    } 
    while (temp->next != NULL) { 
        temp = temp->next; 
    } 
    temp->prev->next = NULL; 
    free(temp); 
}  
void deleteAtPosition(Node** head, int position) 
{ 
    if (*head == NULL) { 
        printf("The list is already empty.\n"); 
        return; 
    } 
    Node* temp = *head; 
    if (position == 1) { 
        deleteAtBeginning(head); 
        return; 
    } 
    for (int i = 1; temp != NULL && i < position; i++) { 
        temp = temp->next; 
    } 
    if (temp == NULL) { 
        printf("Position is greater than the number of " 
               "nodes.\n"); 
        return; 
    } 
    if (temp->next != NULL) { 
        temp->next->prev = temp->prev; 
    } 
    if (temp->prev != NULL) { 
        temp->prev->next = temp->next; 
    } 
    free(temp); 
}  
void printListForward(Node* head) 
{ 
    Node* temp = head; 
    printf("Forward List: "); 
    while (temp != NULL) { 
        printf("%d ", temp->data); 
        temp = temp->next; 
    } 
    printf("\n"); 
}   
void printListReverse(Node* head) 
{ 
    Node* temp = head; 
    if (temp == NULL) { 
        printf("The list is empty.\n"); 
        return; 
    } 
    while (temp->next != NULL) { 
        temp = temp->next; 
    } 
    // Traverse backwards 
    printf("Reverse List: "); 
    while (temp != NULL) { 
        printf("%d ", temp->data); 
        temp = temp->prev; 
    } 
    printf("\n"); 
} 
int main() 
{ 
    Node* head = NULL; 
    insertAtEnd(&head, 10); 
    insertAtEnd(&head, 20); 
    insertAtBeginning(&head, 5); 
    insertAtPosition(&head, 15, 2); // List: 5 15 10 20 
    printf("After Insertions:\n"); 
    printListForward(head); 
    printListReverse(head); 
    deleteAtBeginning(&head); // List: 15 10 20 
    deleteAtEnd(&head); // List: 15 10 
    deleteAtPosition(&head, 2); // List: 15 
    printf("After Deletions:\n"); 
    printListForward(head); 
    return 0; 
}  
