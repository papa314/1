#include <stdio.h> 
#include <stdlib.h> 
// Structure for a BST Node 
struct Node { 
    int data; 
    struct Node* left; 
    struct Node* right; 
};  
struct Node* createNode(int data) { 
    struct Node* newNode = (struct Node*)malloc(sizeof(struct 
Node)); 
    newNode->data = data; 
    newNode->left = newNode->right = NULL; 
    return newNode; 
}  
void inorderTraversal(struct Node* root) { 
    struct Node* stack[100]; // Stack for storing nodes 
    int top = -1; 
    struct Node* current = root; 
    while (current != NULL || top != -1) { 
        while (current != NULL) { 
            stack[++top] = current; 
            current = current->left; 
        } 
        current = stack[top--]; 
        printf("%d ", current->data); 
        current = current->right; 
    } 
} 
void preorderTraversal(struct Node* root) { 
    if (root == NULL) return; 
    struct Node* stack[100]; 
    int top = -1; 
    stack[++top] = root; 
    while (top != -1) { 
        struct Node* current = stack[top--]; 
        printf("%d ", current->data); 
        if (current->right) stack[++top] = current->right; 
        if (current->left) stack[++top] = current->left; 
    } 
} 
void postorderTraversal(struct Node* root) { 
    if (root == NULL) return; 
    struct Node* stack1[100], *stack2[100]; 
    int top1 = -1, top2 = -1; 
    stack1[++top1] = root; 
    while (top1 != -1) { 
        struct Node* current = stack1[top1--]; 
        stack2[++top2] = current; 
        if (current->left) stack1[++top1] = current->left;  
        if (current->right) stack1[++top1] = current->right; 
    } 
    while (top2 != -1) { 
        printf("%d ", stack2[top2--]->data); 
    } 
} 
int main() { 
    struct Node* root = createNode(10); 
    root->left = createNode(5); 
    root->right = createNode(20); 
    root->left->left = createNode(3); 
    root->left->right = createNode(7); 
    root->right->left = createNode(15); 
    root->right->right = createNode(25); 
    printf("Inorder Traversal (LNR) : "); 
    inorderTraversal(root); 
    printf("\n"); 
    printf("Preorder Traversal (NLR) : "); 
    preorderTraversal(root); 
    printf("\n"); 
    printf("Postorder Traversal (LRN) : "); 
    postorderTraversal(root); 
    printf("\n"); 
    return 0; 
}
